<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Imaginary</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Google Sans', Arial, sans-serif;
        }

        body {
            display: flex;
            height: 100vh;
            background-color: #202124;
            color: #e8eaed;
        }

        /* Sidebar */
        .sidebar {
            width: 280px;
            background-color: #202124;
            padding: 16px 0;
            display: flex;
            flex-direction: column;
            border-right: 1px solid #3c4043;
            overflow-y: auto;
        }

        .sidebar-header {
            display: flex;
            align-items: center;
            padding: 10px 20px;
        }

        .menu-icon {
            width: 24px;
            height: 24px;
            color: #e8eaed;
            cursor: pointer;
        }

        .sidebar-content {
            flex: 1;
            display: flex;
            flex-direction: column;
            padding: 16px;
            gap: 16px;
        }

        .sidebar-item {
            display: flex;
            align-items: center;
            padding: 12px 16px;
            border-radius: 8px;
            cursor: pointer;
            color: #e8eaed;
            gap: 12px;
        }

        .sidebar-item:hover {
            background-color: rgba(255, 255, 255, 0.1);
        }

        .sidebar-icon {
            width: 20px;
            height: 20px;
            color: #e8eaed;
        }

        .sidebar-separator {
            height: 1px;
            background-color: #3c4043;
            margin: 8px 16px;
        }

        .sidebar-section-title {
            padding: 16px 16px 8px;
            color: #9aa0a6;
            font-size: 14px;
        }

        .recent-chat {
            padding: 6px 16px;
            cursor: pointer;
            color: #e8eaed;
            font-size: 14px;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }

        .recent-chat:hover {
            background-color: rgba(255, 255, 255, 0.1);
        }

        .sidebar-footer {
            padding: 16px;
            margin-top: auto;
        }

        /* Main Content */
        .main-content {
            flex: 1;
            display: flex;
            flex-direction: column;
            height: 100vh;
            overflow-y: auto;
        }

        /* Header */
        .header {
            display: flex;
            align-items: center;
            padding: 12px 24px;
            justify-content: space-between;
            border-bottom: 1px solid #3c4043;
        }

        .gemini-logo {
            display: flex;
            align-items: center;
            gap: 8px;
            color: #e8eaed;
            font-size: 20px;
            font-weight: 500;
        }

        .model-selector {
            display: flex;
            align-items: center;
            gap: 8px;
            background-color: rgba(255, 255, 255, 0.1);
            border-radius: 20px;
            padding: 6px 12px;
            cursor: pointer;
            color: #e8eaed;
            font-size: 14px;
        }

        .dropdown-icon {
            width: 16px;
            height: 16px;
        }

        .header-right {
            display: flex;
            align-items: center;
            gap: 16px;
        }

        .advanced-button {
            display: flex;
            align-items: center;
            gap: 8px;
            background-color: rgba(255, 255, 255, 0.1);
            border-radius: 20px;
            padding: 8px 16px;
            cursor: pointer;
            color: #e8eaed;
            font-size: 14px;
            border: none;
        }

        .advanced-button .spark-icon {
            color: #ff7675;
        }

        .header-icon {
            width: 24px;
            height: 24px;
            color: #e8eaed;
            cursor: pointer;
        }

        .profile-icon {
            width: 32px;
            height: 32px;
            border-radius: 50%;
            background-color: #8ab4f8;
            display: flex;
            align-items: center;
            justify-content: center;
            color: #202124;
            font-weight: bold;
            cursor: pointer;
        }

        /* Chat Area */
        .chat-area {
            flex: 1;
            display: flex;
            flex-direction: column;
            justify-content: space-between;
            padding: 24px;
        }

        .chat-messages {
            flex: 1;
            display: flex;
            flex-direction: column;
            gap: 16px;
            overflow-y: auto;
        }

        .message {
            max-width: 70%;
            padding: 16px;
            border-radius: 12px;
            margin: 8px 0;
            line-height: 1.5;
            white-space: pre-wrap;
        }

        .user-message {
            align-self: flex-end;
            background-color: #8ab4f8;
            color: #202124;
        }

        .assistant-message {
            align-self: flex-start;
            background-color: #303134;
            color: #e8eaed;
        }

        .welcome-message {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            height: 100%;
            text-align: center;
        }

        .welcome-text {
            font-size: 42px;
            margin-bottom: 120px;
        }

        .welcome-text span:first-child {
            color: #8ab4f8;
        }

        .welcome-text span:last-child {
            color: #ff7675;
        }

        .suggestion-cards {
            display: flex;
            justify-content: center;
            gap: 16px;
            margin-bottom: 60px;
        }

        .suggestion-card {
            background-color: #303134;
            border-radius: 16px;
            padding: 20px;
            max-width: 260px;
            cursor: pointer;
            text-align: left;
        }

        .suggestion-card:hover {
            background-color: #3c4043;
        }

        .suggestion-title {
            font-size: 16px;
            margin-bottom: 8px;
        }

        .suggestion-description {
            font-size: 14px;
            color: #9aa0a6;
        }

        /* Input Area */
        .input-container {
            position: relative;
            max-width: 1024px;
            margin: 0 auto;
            width: 100%;
        }

        .input-area {
            display: flex;
            align-items: flex-end;
            padding: 16px 24px;
            border-radius: 32px;
            background-color: #303134;
            margin-bottom: 32px;
            width: 100%;
            transition: box-shadow 0.3s ease;
            border: 1px solid #3c4043;
        }

        .input-area:focus-within {
            box-shadow: 0 0 0 2px #8ab4f8;
            border-color: transparent;
        }

        .input-area-left {
            display: flex;
            align-items: center;
            padding: 8px;
            cursor: pointer;
        }

        .input-area-center {
            flex: 1;
            display: flex;
            align-items: center;
        }

        .input-field {
            width: 100%;
            background: transparent;
            border: none;
            font-size: 16px;
            color: #e8eaed;
            padding: 12px 0;
            line-height: 1.5;
            resize: none;
            outline: none;
            min-height: 24px;
            max-height: 200px;
            overflow-y: auto;
        }

        .input-field::placeholder {
            color: #9aa0a6;
        }

        .input-area-right {
            display: flex;
            align-items: center;
            gap: 12px;
            padding: 8px;
        }

        .input-icon {
            width: 20px;
            height: 20px;
            color: #9aa0a6;
            cursor: pointer;
        }

        .mic-icon {
            width: 24px;
            height: 24px;
            color: #e8eaed;
            cursor: pointer;
        }

        /* Add to your existing style section */
        .model-dropdown {
            display: none;
            position: absolute;
            top: 60px;
            left: 150px;
            background: #303134;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.3);
            z-index: 1000;
            width: 250px;
            max-height: 400px;
            overflow-y: auto;
            scrollbar-width: thin;
            scrollbar-color: #8ab4f8 #303134;
        }

        .model-option {
            display: flex;
            align-items: center;
            padding: 12px 16px;
            cursor: pointer;
            gap: 12px;
            transition: background-color 0.2s;
        }

        .model-option img {
            width: 24px;
            height: 24px;
            border-radius: 50%;
            object-fit: cover;
        }

        .model-option.selected {
            background-color: rgba(138, 180, 248, 0.1);
        }

        .model-option:hover {
            background-color: #3c4043;
        }

        /* Status indicator for model availability */
        .model-option::after {
            content: '';
            display: block;
            width: 8px;
            height: 8px;
            border-radius: 50%;
            margin-left: auto;
            background-color: #4caf50; /* Available */
        }

        .model-option[data-status="unavailable"]::after {
            background-color: #ff5252; /* Unavailable */
        }

        .profile-dropdown {
            display: none;
            position: absolute;
            top: 60px;
            right: 20px;
            background: #303134;
            border-radius: 12px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.3);
            z-index: 1000;
            width: 300px;
        }

        .profile-header {
            display: flex;
            align-items: center;
            padding: 16px;
            border-bottom: 1px solid #3c4043;
            gap: 12px;
        }

        .profile-img {
            width: 48px;
            height: 48px;
            border-radius: 50%;
        }

        .profile-name {
            font-weight: 500;
            margin-bottom: 4px;
        }

        .profile-email {
            font-size: 14px;
            color: #9aa0a6;
        }

        .profile-menu {
            padding: 8px 0;
        }

        .profile-item {
            display: flex;
            align-items: center;
            padding: 12px 16px;
            cursor: pointer;
            gap: 12px;
        }

        .profile-item:hover {
            background: #3c4043;
        }

        .logout {
            border-top: 1px solid #3c4043;
            margin-top: 8px;
        }

        /* Mobile Responsive Updates */
        @media (max-width: 768px) {
            .sidebar {
                position: fixed;
                left: -280px;
                transition: left 0.3s ease;
                z-index: 1000;
                height: 100vh;
            }

            .sidebar.active {
                left: 0;
            }

            .model-dropdown, .profile-dropdown {
                width: 100%;
                left: 0;
                right: 0;
                top: 70px;
            }
        }

        /* Add to your existing style section */
        .settings-panel {
            display: none;
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: #303134;
            border-radius: 12px;
            width: 90%;
            max-width: 500px;
            z-index: 2000;
            box-shadow: 0 4px 20px rgba(0,0,0,0.3);
        }

        .settings-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 16px;
            border-bottom: 1px solid #3c4043;
        }

        .close-settings {
            background: none;
            border: none;
            color: #e8eaed;
            font-size: 24px;
            cursor: pointer;
        }

        .settings-content {
            padding: 20px;
        }

        .settings-section {
            margin-bottom: 24px;
        }

        .setting-item {
            margin: 16px 0;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .help-links {
            display: flex;
            flex-direction: column;
            gap: 12px;
        }

        .help-links a {
            color: #8ab4f8;
            text-decoration: none;
        }

        .help-links a:hover {
            text-decoration: underline;
        }

        /* Add these styles to your existing style section */
        .references-section {
            margin-top: 24px;
            padding: 20px;
            border-radius: 12px;
            background: rgba(138, 180, 248, 0.05);
            border: 1px solid rgba(138, 180, 248, 0.1);
        }

        .references-section h4 {
            color: #8ab4f8;
            font-size: 18px;
            margin-bottom: 20px;
            padding-bottom: 12px;
            border-bottom: 1px solid #3c4043;
        }

        .references-list {
            display: flex;
            flex-direction: column;
            gap: 16px;
        }

        .reference-item {
            display: flex;
            gap: 16px;
            padding: 16px;
            border-radius: 8px;
            background: rgba(138, 180, 248, 0.07);
            transition: background-color 0.2s;
        }

        .reference-number {
            font-size: 14px;
            font-weight: 600;
            color: #8ab4f8;
            min-width: 24px;
            height: 24px;
            display: flex;
            align-items: center;
            justify-content: center;
            background: rgba(138, 180, 248, 0.1);
            border-radius: 12px;
        }

        .reference-content {
            flex: 1;
        }

        .reference-title {
            display: block;
            color: #8ab4f8;
            text-decoration: none;
            font-weight: 500;
            margin-bottom: 8px;
            font-size: 15px;
            line-height: 1.4;
        }

        .reference-source {
            font-size: 13px;
            color: #9aa0a6;
            margin-bottom: 6px;
        }

        .reference-metadata {
            display: flex;
            flex-direction: column;
            gap: 4px;
            font-size: 12px;
            color: #666;
        }

        .reference-url {
            word-break: break-all;
            opacity: 0.7;
            font-family: monospace;
            padding: 4px 8px;
            background: rgba(0, 0, 0, 0.2);
            border-radius: 4px;
        }

        .reference-item:hover {
            background: rgba(138, 180, 248, 0.1);
        }

        .reference-title:hover {
            text-decoration: underline;
        }

        /* Add to your existing style section */
        .mood-selector {
            display: none;
            position: absolute;
            top: 60px;
            left: 350px;
            background: #303134;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.3);
            z-index: 1000;
            width: 200px;
        }

        .mood-option {
            display: flex;
            align-items: center;
            padding: 12px 16px;
            cursor: pointer;
            gap: 12px;
        }

        .mood-option:hover {
            background: #3c4043;
        }

        .mood-option img {
            width: 20px;
            height: 20px;
        }

        /* Updated profile-item styles */
        .profile-item i {
            width: 20px;
            text-align: center;
            color: #8ab4f8;
        }

        /* Sidebar toggle button styles */
        .sidebar-toggle {
            position: fixed;
            bottom: 20px;
            right: 20px;
            background: #303134;
            border-radius: 50%;
            width: 48px;
            height: 48px;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            z-index: 1001;
            box-shadow: 0 2px 10px rgba(0,0,0,0.3);
        }

        .sidebar-toggle i {
            color: #e8eaed;
            font-size: 20px;
        }

        /* Add these to your existing style section */
        .model-option {
            position: relative;
            padding-right: 40px;
        }

        .model-option::after {
            content: '';
            position: absolute;
            right: 16px;
            top: 50%;
            transform: translateY(-50%);
            width: 8px;
            height: 8px;
            border-radius: 50%;
        }

        .model-option[data-model="claude"]::after {
            background-color: #10a37f;
        }

        .model-option[data-model="claude-haiku"]::after {
            background-color: #10a37f;
        }

        .model-option[data-model="gemini"]::after {
            background-color: #1a73e8;
        }

        .model-option[data-model="gpt4"]::after {
            background-color: #ff6b6b;
        }

        .model-option.selected {
            background: #3c4043;
        }

        /* Add to your existing style section */
        .recent-chat-container {
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 6px 16px;
        }

        .recent-chat-container:hover {
            background-color: rgba(255, 255, 255, 0.1);
        }

        .delete-chat {
            background: none;
            border: none;
            color: #9aa0a6;
            cursor: pointer;
            padding: 4px 8px;
            display: none;
            font-size: 14px;
        }

        .recent-chat-container:hover .delete-chat {
            display: block;
        }

        .delete-chat:hover {
            color: #ff4444;
        }

        .loading-animation {
            display: flex;
            align-items: center;
            gap: 8px;
            padding: 12px 16px;
            background-color: #303134;
            border-radius: 12px;
            align-self: flex-start;
            margin: 8px 0;
        }

        .loading-dot {
            width: 8px;
            height: 8px;
            background-color: #8ab4f8;
            border-radius: 50%;
            animation: bounce 1.4s infinite ease-in-out;
        }

        .loading-dot:nth-child(1) { animation-delay: -0.32s; }
        .loading-dot:nth-child(2) { animation-delay: -0.16s; }

        @keyframes bounce {
            0%, 80%, 100% { 
                transform: scale(0);
            } 
            40% { 
                transform: scale(1.0);
            }
        }

        /* Add these new styles */
        .chat-session {
            display: flex;
            flex-direction: column;
            gap: 8px;
            padding: 16px 0;
        }

        .session-date {
            text-align: center;
            color: #9aa0a6;
            font-size: 14px;
            margin: 16px 0;
            padding: 4px;
            background-color: rgba(255, 255, 255, 0.05);
            border-radius: 12px;
        }

        .message-container {
            display: flex;
            flex-direction: column;
            gap: 4px;
            max-width: 70%;
        }

        .message-time {
            font-size: 12px;
            color: #9aa0a6;
            margin-bottom: 2px;
        }

        .message-date {
            text-align: center;
            color: #9aa0a6;
            font-size: 12px;
            margin: 16px 0 8px;
        }

        .message-info {
            font-size: 12px;
            color: #9aa0a6;
            margin-top: 4px;
        }

        .user-message .message-time,
        .user-message .message-info {
            align-self: flex-end;
        }

        .assistant-message .message-container {
            align-self: flex-start;
        }

        .user-message .message-container {
            align-self: flex-end;
        }

        /* Add to your existing style section */
        .mood-button {
            display: flex;
            align-items: center;
            gap: 8px;
            background: none;
            border: none;
            color: #9aa0a6;
            cursor: pointer;
            padding: 8px;
            font-size: 14px;
        }

        .mood-button:hover {
            color: #e8eaed;
        }

        /* Add to your existing style section */
        .mood-selector {
            display: none;
            position: absolute;
            bottom: 80px;
            left: 20px;
            background: #303134;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.3);
            z-index: 1000;
            width: 200px;
            overflow: hidden;
        }

        .mood-button {
            display: flex;
            align-items: center;
            gap: 8px;
            background: none;
            border: none;
            color: #9aa0a6;
            cursor: pointer;
            padding: 8px;
            font-size: 14px;
        }

        .mood-button:hover {
            color: #e8eaed;
        }

        .mood-option {
            display: flex;
            align-items: center;
            padding: 12px 16px;
            cursor: pointer;
            gap: 12px;
            color: #e8eaed;
            transition: background-color 0.2s;
        }

        .mood-option:hover {
            background: #3c4043;
        }

        .mood-option.selected {
            background: #3c4043;
            color: #8ab4f8;
        }

        .mood-option i {
            width: 20px;
            text-align: center;
        }

        /* Add to your existing style section */

        .plus-icon {
            margin-right: 8px;
            transition: transform 0.2s ease;
        }

        .plus-icon:hover {
            transform: rotate(90deg);
        }

        /* Update the input-area-right styles */
        .input-area-right {
            display: flex;
            align-items: center;
            gap: 12px;
            padding: 8px;
        }

        /* Add new styles for different message content types */
        .message-text {
            font-size: 15px;
        }

        .message-code {
            background: #1e1e1e;
            border-radius: 8px;
            padding: 12px;
            margin: 8px 0;
            overflow-x: auto;
        }

        .message-code pre {
            margin: 0;
            font-family: 'Consolas', 'Monaco', monospace;
            font-size: 14px;
        }

        .message.error {
            background-color: #ff44336e;
            color: #ffffff;
        }

        /* Add syntax highlighting colors */
        .message-code .keyword { color: #569cd6; }
        .message-code .string { color: #ce9178; }
        .message-code .comment { color: #6a9955; }
        .message-code .function { color: #dcdcaa; }

        /* Enhanced Input Area */
.input-area {
    display: flex;
    align-items: flex-end;
    padding: 16px 24px;
    border-radius: 32px;
    background-color: #303134;
    margin-bottom: 32px;
    width: 100%;
    transition: box-shadow 0.3s ease;
    border: 1px solid #3c4043;
}

.input-area:focus-within {
    box-shadow: 0 0 0 2px #8ab4f8;
    border-color: transparent;
}

.input-field {
    width: 100%;
    background: transparent;
    border: none;
    font-size: 16px;
    color: #e8eaed;
    padding: 12px 0;
    line-height: 1.5;
    resize: none;
    outline: none;
    min-height: 24px;
    max-height: 200px;
    overflow-y: auto;
}

/* Message Formatting Styles */
.message {
    max-width: 70%;
    padding: 16px;
    border-radius: 12px;
    margin: 8px 0;
    line-height: 1.6;
    font-size: 15px;
}

.message pre {
    background: #1e1e1e;
    border-radius: 8px;
    padding: 12px;
    overflow-x: auto;
    margin: 8px 0;
}

.message code {
    font-family: 'Consolas', 'Monaco', monospace;
    background: rgba(255, 255, 255, 0.1);
    padding: 2px 4px;
    border-radius: 4px;
    font-size: 14px;
}

.message strong {
    font-weight: 600;
}

.message em {
    font-style: italic;
}

.message ul, .message ol {
    margin: 8px 0;
    padding-left: 24px;
}

.message p {
    margin: 8px 0;
}

.message blockquote {
    border-left: 4px solid #8ab4f8;
    margin: 8px 0;
    padding-left: 16px;
    color: #9aa0a6;
}

.message a {
    color: #8ab4f8;
    text-decoration: none;
}

.message a:hover {
    text-decoration: underline;
}

/* Loading Animation Enhancement */
.loading-animation {
    padding: 16px;
    background-color: #303134;
    border-radius: 12px;
    align-self: flex-start;
    display: flex;
    align-items: center;
    gap: 8px;
}

.loading-dot {
    width: 8px;
    height: 8px;
    background-color: #8ab4f8;
    border-radius: 50%;
    animation: bounce 1.4s infinite ease-in-out;
}

/* Add this to the existing <style> section in chatscreen.ejs */
.references-section {
    margin-top: 16px;
    padding-top: 16px;
    border-top: 1px solid #3c4043;
}

.references-section h4 {
    margin-bottom: 8px;
    color: #8ab4f8;
}

.references-section a {
    color: #8ab4f8;
    text-decoration: none;
    display: block;
    margin-bottom: 4px;
    word-break: break-all;
}

.reference-item {
    margin-bottom: 12px;
    padding: 8px;
    border-radius: 6px;
    background: rgba(138, 180, 248, 0.1);
}

.reference-title {
    display: block;
    color: #8ab4f8;
    text-decoration: none;
    font-weight: 500;
    margin-bottom: 4px;
}

.reference-title:hover {
    text-decoration: underline;
}

.reference-source {
    font-size: 12px;
    color: #9aa0a6;
}

/* Add to your existing style section in chatscreen.ejs */
.switch {
    position: relative;
    display: inline-block;
    width: 40px;
    height: 20px;
    margin-right: 8px;
}

.switch input {
    opacity: 0;
    width: 0;
    height: 0;
}

.slider {
    position: absolute;
    cursor: pointer;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: #5f6368;
    transition: .4s;
    border-radius: 20px;
}

.slider:before {
    position: absolute;
    content: "";
    height: 16px;
    width: 16px;
    left: 2px;
    bottom: 2px;
    background-color: white;
    transition: .4s;
    border-radius: 50%;
}

input:checked + .slider {
    background-color: #8ab4f8;
}

input:checked + .slider:before {
    transform: translateX(20px);
}

.search-label {
    font-size: 14px;
    color: #9aa0a6;
}

.references {
    margin-top: 16px;
    padding-top: 16px;
    border-top: 1px solid #3c4043;
}

.reference-item {
    margin-bottom: 12px;
}

.reference-title {
    font-weight: 500;
    color: #8ab4f8;
}

.reference-source {
    font-size: 12px;
    color: #9aa0a6;
    margin: 4px 0;
}

.reference-snippet {
    font-size: 14px;
    color: #e8eaed;
}

/* Add to your existing style section in chatscreen.ejs */
.search-controls {
    display: flex;
    align-items: center;
    gap: 10px;
}

.search-toggle {
    display: flex;
    align-items: center;
    cursor: pointer;
}

.search-toggle .slider {
    position: relative;
    width: 40px;
    height: 20px;
    background-color: #5f6368;
    border-radius: 20px;
    margin-right: 8px;
    transition: .4s;
}

.search-toggle .slider:before {
    content: "";
    position: absolute;
    width: 16px;
    height: 16px;
    left: 2px;
    top: 2px;
    background-color: white;
    border-radius: 50%;
    transition: .4s;
}

.search-toggle input:checked + .slider {
    background-color: #8ab4f8;
}

.search-toggle input:checked + .slider:before {
    transform: translateX(20px);
}

.search-toggle .label {
    color: #9aa0a6;
    font-size: 14px;
}

.search-type {
    background: #303134;
    border: 1px solid #3c4043;
    color: #e8eaed;
    padding: 5px 10px;
    border-radius: 4px;
    font-size: 14px;
    cursor: pointer;
}

.search-type:hover {
    border-color: #8ab4f8;
}

/* Academic paper results styling */
.paper-item {
    padding: 16px;
    margin-bottom: 16px;
    background: rgba(138, 180, 248, 0.05);
    border-radius: 8px;
    border: 1px solid #3c4043;
}

.paper-item h4 {
    margin: 0 0 8px 0;
    color: #8ab4f8;
}

.paper-meta {
    display: flex;
    gap: 12px;
    font-size: 13px;
    color: #9aa0a6;
    margin-bottom: 8px;
    flex-wrap: wrap;
}

.paper-snippet {
    margin: 8px 0;
    font-size: 14px;
    line-height: 1.5;
}

.paper-actions {
    display: flex;
    gap: 8px;
    margin-top: 12px;
}

.paper-link, .download-btn {
    padding: 6px 12px;
    border-radius: 4px;
    font-size: 13px;
    text-decoration: none;
    display: flex;
    align-items: center;
    gap: 4px;
}

.paper-link {
    background: rgba(138, 180, 248, 0.1);
    color: #8ab4f8;
}

.paper-link:hover {
    background: rgba(138, 180, 248, 0.2);
}

.download-btn {
    background: rgba(76, 175, 80, 0.1);
    color: #4caf50;
    border: none;
    cursor: pointer;
}

.download-btn:hover {
    background: rgba(76, 175, 80, 0.2);
}

.download-btn:disabled {
    opacity: 0.6;
    cursor: not-allowed;
}

#yearRangeControls {
    display: flex;
    gap: 8px;
    align-items: center;
}

#yearRangeControls input {
    background: #303134;
    border: 1px solid #3c4043;
    color: #e8eaed;
    padding: 6px 8px;
    border-radius: 4px;
    width: 80px;
}

/* Add to your CSS in chatscreen.ejs */
.download-success {
    color: #4caf50;
    font-size: 12px;
    margin-top: 4px;
}

.download-error {
    color: #ff5252;
    font-size: 12px;
    margin-top: 4px;
}

/* Add this right after your existing style section */
.model-option {
    position: relative;
    opacity: 0.7;  /* Dim the locked models by default */
}

.model-option.pro {
    opacity: 1;    /* Full opacity for pro models */
}

.model-lock {
    position: absolute;
    right: 12px;
    top: 50%;
    transform: translateY(-50%);
    color: #ff4444;
    font-size: 16px;
}

.model-option.locked {
    cursor: not-allowed;
}

.pro-badge {
   background: linear-gradient(45deg, #0A84FF, #00C2FF);
    color: white;
    padding: 2px 6px;
    border-radius: 4px;
    font-size: 10px;
    position: absolute;
    right: 32px;
    top: 50%;
    transform: translateY(-50%);
}

.upgrade-modal {
    display: none;
    position: fixed;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    background: #303134;
    padding: 24px;
    border-radius: 12px;
    z-index: 2000;
    width: 90%;
    max-width: 400px;
    box-shadow: 0 4px 20px rgba(0,0,0,0.3);
}

.upgrade-modal h2 {
    margin-bottom: 16px;
    color: #8ab4f8;
}

.upgrade-content {
    margin-bottom: 24px;
}

.upgrade-buttons {
    display: flex;
    gap: 12px;
    justify-content: flex-end;
}

.upgrade-button {
    padding: 8px 16px;
    border-radius: 6px;
    border: none;
    cursor: pointer;
    font-weight: 500;
}

.upgrade-now {
    background: #8ab4f8;
    color: #202124;
}

.maybe-later {
    background: transparent;
    color: #9aa0a6;
    border: 1px solid #3c4043;
}
    </style>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
</head>
<body>
    <!-- Sidebar -->
    <aside class="sidebar">
        <div class="sidebar-header">
            <svg class="menu-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor">
                <path d="M3 18h18v-2H3v2zm0-5h18v-2H3v2zm0-7v2h18V6H3z"/>
            </svg>
        </div>
        
        <div class="sidebar-content">
            <div class="sidebar-item" id="new-chat">
                <svg class="sidebar-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor">
                    <path d="M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"/>
                </svg>
                <span>New chat</span>
            </div>
            
            <div class="sidebar-separator"></div>
            
            <div class="sidebar-section-title">Recent</div>
            
            <% chats.forEach(chat => { %>
                <div class="recent-chat-container">
                    <div class="recent-chat" data-chat-id="<%= chat._id %>">
                        <%= chat.title %>
                    </div>
                    <button class="delete-chat" data-chat-id="<%= chat._id %>">
                        <i class="fas fa-trash"></i>
                    </button>
                </div>
            <% }) %>
        </div>
        
        <div class="sidebar-footer">
            <div class="sidebar-item">
                <svg class="sidebar-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor">
                    <path d="M19.14 12.94c.04-.3.06-.61.06-.94 0-.32-.02-.64-.07-.94l2.03-1.58c.18-.14.23-.41.12-.61l-1.92-3.32c-.12-.22-.37-.29-.59-.22l-2.39.96c-.5-.38-1.03-.7-1.62-.94l-.36-2.54c-.04-.24-.24-.41-.48-.41h-3.84c-.24 0-.43.17-.47.41l-.36 2.54c-.59.24-1.13.56-1.62-.94l2.39.96c.22-.08.47 0 .59-.22l1.92-3.32c.12-.22.07-.47-.12-.61l-2.01-1.58zM12 15.6c-1.98 0-3.6-1.62-3.6-3.6s1.62-3.6 3.6-3.6 3.6 1.62 3.6 3.6-1.62 3.6-3.6 3.6z"/>
                </svg>
                Settings
            </div>
        </div>
    </aside>

    <!-- Main Content -->
    <main class="main-content">
        <!-- Header -->
        <header class="header">
            <div class="gemini-logo">
                Imaginary Hub
                <div class="model-selector">
                    Gemini
                    <svg class="dropdown-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor">
                        <path d="M7 10l5 5 5-5z"/>
                    </svg>
                </div>
            </div>
            
            <div class="header-right">
                <% if (user.isPro) { %>
                    <div class="pro-status">
                        <span class="pro-badge" style="position: static; margin-right: 12px;">PRO</span>
                    </div>
                <% } else { %>
                    <button class="advanced-button">
                        <svg class="spark-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor">
                            <path d="M7 2v11h3v9l7-12h-4l4-8z"/>
                        </svg>
                        <a href="https://buy.stripe.com/test_cN23fjafn4PkgsoaEE" style="text-decoration: none; color: white;">Upgrade</a>
                    </button>
                <% } %>
                <svg class="header-icon settings-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor">
                    <path d="M19.14 12.94c.04-.3.06-.61.06-.94 0-.32-.02-.64-.07-.94l2.03-1.58c.18-.14.23-.41.12-.61l-1.92-3.32c-.12-.22-.37-.29-.59-.22l-2.39.96c-.5-.38-1.03-.7-1.62-.94l-.36-2.54c-.04-.24-.24-.41-.48-.41h-3.84c-.24 0-.43.17-.47.41l-.36 2.54c-.59.24-1.13-.56-1.62-.94l2.39.96c.22-.08.47 0 .59-.22l1.92-3.32c.12-.22.07-.47-.12-.61l-2.01-1.58zM12 15.6c-1.98 0-3.6-1.62-3.6-3.6s1.62-3.6 3.6-3.6 3.6 1.62 3.6 3.6-1.62 3.6-3.6 3.6z"/>
                </svg>
                
                <div class="profile-icon">A</div>
            </div>

            <!-- Model Dropdown -->
            <div class="model-dropdown" id="modelDropdown">
    <div class="model-option" data-model="deepseek">
        <img src="https://brandlogo.org/wp-content/uploads/2025/02/DeepSeek-Icon-2024.png.webp" alt="DeepSeek">
        DeepSeek
         <!-- <span class="pro-badge">PRO</span> -->
    </div>
    <div class="model-option" data-model="gemini">
        <img src="https://brandlogo.org/wp-content/uploads/2024/06/Gemini-Icon.png.webp" alt="Gemini">
        Gemini
    </div>
    <div class="model-option" data-model="gpt-3.5">
        <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/a/a4/GPT-4.png/1200px-GPT-4.png" alt="GPT-3.5">
        GPT-3.5 Turbo
         <!-- <span class="pro-badge">PRO</span> -->
    </div>
    <div class="model-option" data-model="gpt-4">
        <img src="https://img.icons8.com/stamp/512/228BE6/chatgpt.png" alt="GPT-4">
        GPT-4
         <!-- <span class="pro-badge">PRO</span> -->
    </div>
    <div class="model-option" data-model="claude-sonnet">
        <img src="https://ih1.redbubble.net/image.5603398824.2012/raf,360x360,075,t,fafafa:ca443f4786.jpg" alt="Claude Sonnet">
        Claude Sonnet
         <!-- <span class="pro-badge">PRO</span> -->

    </div>
    <div class="model-option" data-model="claude-heroku">
        <img src="https://registry.npmmirror.com/@lobehub/icons-static-png/1.45.0/files/light/anthropic.png" alt="Claude Heroku">
        Claude Heroku
         <!-- <span class="pro-badge">PRO</span> -->
    </div>
    <div class="model-option" data-model="claude-01">
        <img src="https://ih1.redbubble.net/image.5603398824.2012/raf,360x360,075,t,fafafa:ca443f4786.jpg" alt="Claude 2.1">
        Claude 2.1
         <!-- <span class="pro-badge">PRO</span> -->
    </div>
    <div class="model-option" data-model="grok">
        <img src="https://registry.npmmirror.com/@lobehub/icons-static-png/1.45.0/files/dark/grok.png" alt="Grok">
        Grok
         <!-- <span class="pro-badge">PRO</span> -->
    </div>
    <div class="model-option" data-model="grok-3.5">
        <img src="https://registry.npmmirror.com/@lobehub/icons-static-png/1.45.0/files/light/xai.png" alt="Grok 3.5">
        Grok 3.5
         <!-- <span class="pro-badge">PRO</span> -->
    </div>
    <div class="model-option" data-model="huggingface">
        <img src="https://registry.npmmirror.com/@lobehub/icons-static-png/1.45.0/files/dark/huggingface-color.png" alt="Hugging Face">
        Hugging Face
         <!-- <span class="pro-badge">PRO</span> -->
    </div>
    <div class="model-option" data-model="together-ai">
        <img src="https://registry.npmmirror.com/@lobehub/icons-static-png/1.45.0/files/light/together-color.png" alt="Together AI">
        Together AI
         <!-- <span class="pro-badge">PRO</span> -->

    </div>
    <div class="model-option" data-model="ollama">
        <img src="https://registry.npmmirror.com/@lobehub/icons-static-png/latest/files/light/ollama.png" alt="Ollama">
        Ollama
         <!-- <span class="pro-badge">PRO</span> -->

    </div>
    <div class="model-option" data-model="deepinfra">
        <img src="https://registry.npmmirror.com/@lobehub/icons-static-png/1.45.0/files/light/deepinfra-color.png" alt="DeepInfra">
        DeepInfra
         <!-- <span class="pro-badge">PRO</span> -->
    </div>
    <div class="model-option" data-model="perplexity">
        <img src="https://registry.npmmirror.com/@lobehub/icons-static-png/1.45.0/files/light/perplexity-color.png" alt="Perplexity">
        Perplexity
         <!-- <span class="pro-badge">PRO</span> -->

    </div>
</div>

            <!-- Profile Dropdown -->
            <div class="profile-dropdown" id="profileDropdown">
                <div class="profile-header">
                    <img src="<%= user.avatar || 'https://via.placeholder.com/48' %>" alt="Profile" class="profile-img">
                    <div>
                        <div class="profile-name"><%= user.name %></div>
                        <div class="profile-email"><%= user.email %></div>
                    </div>
                </div>
                <div class="profile-menu">
                    <div class="profile-item">
                        <i class="fas fa-user"></i>
                        My Profile
                    </div>
                    <div class="profile-item">
                        <i class="fas fa-cog"></i>
                        Settings
                    </div>
                    <div class="profile-item logout">
                        <i class="fas fa-sign-out-alt"></i>
                        Sign Out
                    </div>
                </div>
            </div>
        </header>

        <!-- Chat Area -->
        <div class="chat-area">
            <div class="chat-messages" id="chatMessages">
                <div class="welcome-message" id="welcomeMessage">
                    <div class="welcome-text">
                        <span>Hello, </span><span><%= user.name %></span>
                    </div>
                    
                    <div class="suggestion-cards">
                        <div class="suggestion-card">
                            <div class="suggestion-title">Create an weight tracking Plan</div>
                            <div class="suggestion-description">for tracking tasks</div>
                        </div>
                        
                        <div class="suggestion-card">
                            <div class="suggestion-title">Write requirements for a fitness tracking</div>
                            <div class="suggestion-description">a fitness tracking Blog</div>
                        </div>
                        
                        <div class="suggestion-card">
                            <div class="suggestion-title">Design an interactive kaleidoscope</div>
                            <div class="suggestion-description">kaleidoscope</div>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Input Area -->
            <div class="input-container">
                <div class="input-area">
                    <div class="input-area-left">
                        <div class="search-controls">
                            <label class="search-toggle">
                                <input type="checkbox" id="webSearchToggle">
                                <span class="slider"></span>
                                <span class="label">Web Search</span>
                            </label>
                            
                            <select id="searchType" class="search-type">
                                <option value="nws">Web</option>
                                <!-- <option value="">Web</option> -->
                                <option value="isch">Images</option>
                                <option value="scholar">Academic</option>
                            </select>
                            
                            <div id="yearRangeControls" style="display: none;">
                                <input type="number" id="startYear" placeholder="Start year" min="1900" max="2025">
                                <input type="number" id="endYear" placeholder="End year" min="1900" max="2025">
                            </div>
                        </div>
                    </div>
                    
                    <div class="input-area-center">
                        <input type="text" class="input-field" id="inputField" placeholder="Ask Gemini">
                    </div>
                    
                    <div class="input-area-right">
                        <!-- Add plus icon before send icon -->
                        <svg class="input-icon plus-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor">
                            <path d="M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"/>
                        </svg>
                        <svg class="input-icon send-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor">
                            <path d="M2.01 21L23 12 2.01 3 2 10l15 2-15 2z"/>
                        </svg>
                        <!-- Replace mic icon with phone icon -->
                        <a href="https://imaginaryhubvoice.vercel.app/">
                            <svg class="mic-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor">
                                <path d="M20.01 15.38c-1.23 0-2.42-.2-3.53-.56-.35-.12-.74-.03-1.01.24l-1.57 1.97c-2.83-1.35-5.48-3.9-6.89-6.83l1.95-1.66c.27-.28.35-.67.24-1.02-.37-1.11-.56-2.3-.56-3.53 0-.54-.45-.99-.99-.99H4.19C3.65 3 3 3.24 3 3.99 3 13.28 10.73 21 20.01 21c.71 0 .99-.63.99-1.18v-3.45c0-.54-.45-.99-.99-.99z"/>
                            </svg>
                        </a>
                    </div>
                </div>
            </div>
        </div>

        <!-- Mood Selector -->
        <div class="mood-selector" id="moodSelector">
            <div class="mood-option" data-mood="professional">
                <i class="fas fa-briefcase"></i> Professional
            </div>
            <div class="mood-option" data-mood="casual">
                <i class="fas fa-coffee"></i> Casual
            </div>
            <div class="mood-option" data-mood="friendly">
                <i class="fas fa-smile"></i> Friendly
            </div>
            <div class="mood-option" data-mood="creative">
                <i class="fas fa-paint-brush"></i> Creative
            </div>
        </div>
    </main>

    <!-- Settings Panel -->
    <div class="settings-panel" id="settingsPanel">
        <div class="settings-header">
            <h2>Settings & Help</h2>
            <button class="close-settings">×</button>
        </div>
        <div class="settings-content">
            <div class="settings-section">
                <h3>General</h3>
                <div class="setting-item">
                    <label>Theme</label>
                    <select id="themeSelect">
                        <option value="dark">Dark</option>
                        <option value="light">Light</option>
                    </select>
                </div>
                <div class="setting-item">
                    <label>Language</label>
                    <select id="languageSelect">
                        <option value="en">English</option>
                        <option value="es">Spanish</option>
                    </select>
                </div>
            </div>
            <div class="settings-section">
                <h3>Help & Support</h3>
                <div class="help-links">
                    <a href="#">Documentation</a>
                    <a href="#">FAQs</a>
                    <a href="#">Contact Support</a>
                </div>
            </div>
        </div>
    </div>

    <!-- Upgrade Modal -->
    <div class="upgrade-modal" id="upgradeModal">
        <h2>Upgrade to Pro</h2>
        <div class="upgrade-content">
            <p>This model is only available to Pro subscribers. Upgrade now to unlock:</p>
            <ul style="margin-top: 12px; margin-left: 20px;">
                <li>Access to all AI models</li>
                <li>Faster response times</li>
                <li>Priority support</li>
                <li>Advanced features</li>
            </ul>
        </div>
        <div class="upgrade-buttons">
            <button class="upgrade-button maybe-later">Maybe Later</button>
            <button class="upgrade-button upgrade-now">Upgrade Now</button>
        </div>
    </div>

    <!-- JavaScript for basic functionality -->
    <script>
        let selectedModel = 'gemini'; // Default to Gemini
        document.querySelector('.input-field').placeholder = 'Ask Gemini';
        document.querySelector('.model-selector').textContent = 'Gemini';

        let selectedMood = 'professional';
        let currentChatId = null;

        async function checkSubscriptionStatus() {
            try {
                const response = await fetch('/user/subscription-status');
                const data = await response.json();
                
                if (data.isPro) {
                    // Enable all models
                    document.querySelectorAll('.model-option.locked').forEach(option => {
                        option.classList.remove('locked');
                        option.classList.add('pro');
                        const lock = option.querySelector('.model-lock');
                        if (lock) lock.remove();
                    });
                }
            } catch (error) {
                console.error('Error checking subscription status:', error);
            }
        }

        document.addEventListener('DOMContentLoaded', () => {
            checkSubscriptionStatus();
            
            const webSearchToggle = document.getElementById('webSearchToggle');
            const searchType = document.getElementById('searchType');
            const inputField = document.querySelector('.input-field');
            const chatMessages = document.getElementById('chatMessages');

            // Add these variables at the top
            const isProUser = <%= user.isPro || false %>; // This should be passed from your backend
            const freeModels = ['gemini']; // Models that are free for all users

            inputField.addEventListener('focus', () => {
                document.querySelector('.input-area').style.boxShadow = '0 0 0 1px #8ab4f8';
            });
            
            inputField.addEventListener('blur', () => {
                document.querySelector('.input-area').style.boxShadow = 'none';
            });

            // Model Selection
            const modelSelector = document.querySelector('.model-selector');
            const modelDropdown = document.getElementById('modelDropdown');
            
            modelSelector.addEventListener('click', () => {
                modelDropdown.style.display = modelDropdown.style.display === 'none' ? 'block' : 'none';
            });

            document.querySelectorAll('.model-option').forEach(option => {
                option.addEventListener('click', (e) => {
                    const model = option.dataset.model;
                    
                    // Check if model requires pro access
                    if (!freeModels.includes(model) && !isProUser) {
                        e.preventDefault();
                        showUpgradeModal();
                        return;
                    }

                    selectedModel = model;
                    modelSelector.textContent = option.textContent.trim();
                    modelDropdown.style.display = 'none';
                    
                    // Update placeholder text and UI
                    const inputField = document.querySelector('.input-field');
                    inputField.placeholder = `Ask ${option.textContent.trim()}`;
                    
                    // Update selected state
                    document.querySelectorAll('.model-option').forEach(opt => {
                        opt.classList.remove('selected');
                    });
                    option.classList.add('selected');
                });
            });

            // Add upgrade modal functionality
            const upgradeModal = document.getElementById('upgradeModal');
            
            function showUpgradeModal() {
                upgradeModal.style.display = 'block';
            }

            function hideUpgradeModal() {
                upgradeModal.style.display = 'none';
            }

            // Handle upgrade button clicks
            document.querySelector('.upgrade-now').addEventListener('click', () => {
                window.location.href = 'https://buy.stripe.com/test_cN23fjafn4PkgsoaEE';
            });

            document.querySelector('.maybe-later').addEventListener('click', hideUpgradeModal);

            // Close modal when clicking outside
            window.addEventListener('click', (e) => {
                if (e.target === upgradeModal) {
                    hideUpgradeModal();
                }
            });

            // Mood Selection
            const moodSelector = document.getElementById('moodSelector');
            const inputAreaLeft = document.querySelector('.input-area-left');
            const moodButton = document.createElement('button');
            moodButton.className = 'mood-button';
            moodButton.innerHTML = `<i class="fas fa-smile"></i> Professional`;
            inputAreaLeft.insertBefore(moodButton, inputAreaLeft.firstChild);

            let selectedMood = 'professional';

            moodButton.addEventListener('click', (e) => {
                e.stopPropagation();
                const isVisible = moodSelector.style.display === 'block';
                moodSelector.style.display = isVisible ? 'none' : 'block';
            });

            document.querySelectorAll('.mood-option').forEach(option => {
                option.addEventListener('click', (e) => {
                    e.stopPropagation();
                    selectedMood = option.dataset.mood;
                    
                    // Update button text and icon
                    const icon = option.querySelector('i').className;
                    moodButton.innerHTML = `<i class="${icon}"></i> ${selectedMood.charAt(0).toUpperCase() + selectedMood.slice(1)}`;
                    
                    // Update selected state
                    document.querySelectorAll('.mood-option').forEach(opt => opt.classList.remove('selected'));
                    option.classList.add('selected');
                    
                    moodSelector.style.display = 'none';
                });
            });

            // Close mood selector when clicking outside
            document.addEventListener('click', (e) => {
                if (!e.target.closest('.mood-button') && !e.target.closest('.mood-selector')) {
                    moodSelector.style.display = 'none';
                }
            });

            // Profile Dropdown
            const profileIcon = document.querySelector('.profile-icon');
            const profileDropdown = document.getElementById('profileDropdown');
            
            profileIcon.addEventListener('click', () => {
                profileDropdown.style.display = profileDropdown.style.display === 'none' ? 'block' : 'none';
            });

            // Sidebar Toggle for Mobile
            const menuIcon = document.querySelector('.menu-icon');
            const sidebar = document.querySelector('.sidebar');
            
            menuIcon.addEventListener('click', () => {
                sidebar.classList.toggle('active');
            });

            // Handle new chat button
            const newChatButton = document.getElementById('new-chat');
            newChatButton.addEventListener('click', () => {
                currentChatId = null;
                chatMessages.innerHTML = '';
                document.getElementById('welcomeMessage').style.display = 'flex';
                inputField.value = '';
                inputField.focus();
            });

            document.getElementById('searchType').addEventListener('change', function() {
                const isAcademic = this.value === 'scholar';
                document.getElementById('yearRangeControls').style.display = isAcademic ? 'flex' : 'none';
            });

            async function sendMessage() {
                const message = inputField.value.trim();
                if (!message) return;

                // Check if selected model requires pro access
                if (!freeModels.includes(selectedModel) && !isProUser) {
                    showUpgradeModal();
                    return;
                }

                const searchType = document.getElementById('searchType').value;
                const isAcademicSearch = searchType === 'scholar';
                
                if (isAcademicSearch) {
                    const startYear = document.getElementById('startYear').value || '2015';
                    const endYear = document.getElementById('endYear').value || new Date().getFullYear();
                    
                    try {
                        const response = await fetch(`/chat/academic-search?query=${encodeURIComponent(message)}&startYear=${startYear}&endYear=${endYear}`);
                        const papers = await response.json();
                        
                        displayAcademicResults(papers);
                        return;
                    } catch (error) {
                        console.error('Academic search error:', error);
                    }
                }
                
                const includeWebSearch = document.getElementById('webSearchToggle').checked;
                
                document.getElementById('welcomeMessage').style.display = 'none';
                
                // Add user message
                const userMessageDiv = document.createElement('div');
                userMessageDiv.className = 'message user-message';
                userMessageDiv.textContent = message;
                chatMessages.appendChild(userMessageDiv);
                inputField.value = '';

                // Add loading animation
                const loadingDiv = document.createElement('div');
                loadingDiv.className = 'loading-animation';
                loadingDiv.innerHTML = `
                    <div class="loading-dot"></div>
                    <div class="loading-dot"></div>
                    <div class="loading-dot"></div>
                `;
                chatMessages.appendChild(loadingDiv);
                chatMessages.scrollTop = chatMessages.scrollHeight;

                try {
                    const response = await fetch('/chat/message', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ 
                            message, 
                            model: selectedModel, 
                            mood: selectedMood,
                            includeWebSearch: includeWebSearch.toString(),
                            searchType: document.getElementById('searchType').value
                        })
                    }).then(res => res.json());

                    // Remove loading animation
                    loadingDiv.remove();

                    // Add AI response with formatted links
                    const assistantMessageDiv = document.createElement('div');
                    assistantMessageDiv.className = 'message assistant-message';
                    
                    // Convert markdown links to HTML and format references
                    assistantMessageDiv.innerHTML = formatResponseWithLinks(response.response);
                    
                    chatMessages.appendChild(assistantMessageDiv);
                    chatMessages.scrollTop = chatMessages.scrollHeight;
                } catch (error) {
                    loadingDiv.remove();
                    const errorDiv = document.createElement('div');
                    errorDiv.className = 'message assistant-message error';
                    errorDiv.textContent = 'Sorry, there was an error processing your request.';
                    chatMessages.appendChild(errorDiv);
                    console.error('Error:', error);
                }
            }

            function displayAcademicResults(papers) {
                const chatMessages = document.getElementById('chatMessages');
                document.getElementById('welcomeMessage').style.display = 'none';
                
                const resultsContainer = document.createElement('div');
                resultsContainer.className = 'message assistant-message';
                resultsContainer.innerHTML = `
                    <h3>Academic Papers for "${inputField.value}"</h3>
                    <div class="papers-list"></div>
                `;
                
                const papersList = resultsContainer.querySelector('.papers-list');
                
                papers.forEach(paper => {
                    const paperElement = document.createElement('div');
                    paperElement.className = 'paper-item';
                    paperElement.innerHTML = `
                        <h4>${paper.title}</h4>
                        <div class="paper-meta">
                            <span>${paper.authors?.join(', ') || ' authors'}</span>
                            <span>${paper.publication || ''} (${paper.year || 'year'})</span>
                            <span>Cited by: ${paper.citedBy || 0}</span>
                        </div>
                        <p class="paper-snippet">${paper.snippet}</p>
                        <div class="paper-actions">
                            <a href="${paper.url}" target="_blank" class="paper-link">View Source</a>
                            ${paper.pdfUrl ? `<a href="${paper.pdfUrl}" target="_blank" class="paper-link">View PDF</a>` : ''}
                            <button class="download-btn" data-title="${paper.title}" data-url="${paper.url}">
                                <i class="fas fa-download"></i> Download via Sci-Hub
                            </button>
                        </div>
                    `;
                    
                    papersList.appendChild(paperElement);
                });
                
                chatMessages.appendChild(resultsContainer);
                chatMessages.scrollTop = chatMessages.scrollHeight;
                
                // Update the download button handler
                document.querySelectorAll('.download-btn').forEach(btn => {
                    btn.addEventListener('click', async () => {
                        const title = btn.dataset.title;
                        const url = btn.dataset.url;
                        
                        btn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Downloading...';
                        btn.disabled = true;
                        
                        try {
                            const response = await fetch('/chat/download-paper', {
                                method: 'POST',
                                headers: { 'Content-Type': 'application/json' },
                                body: JSON.stringify({ 
                                    title: title,
                                    url: url
                                })
                            });
                            
                            if (!response.ok) {
                                throw new Error('Download failed');
                            }
                            
                            const blob = await response.blob();
                            if (blob.size === 0) {
                                throw new Error('Empty PDF received');
                            }
                            
                            const downloadUrl = window.URL.createObjectURL(blob);
                            const a = document.createElement('a');
                            a.href = downloadUrl;
                            a.download = `${title}.pdf`.replace(/[^a-z0-9]/gi, '_');
                            document.body.appendChild(a);
                            a.click();
                            window.URL.revokeObjectURL(downloadUrl);
                            a.remove();
                            
                            // Show success message
                            const successMsg = document.createElement('div');
                            successMsg.className = 'download-success';
                            successMsg.textContent = 'Download successful!';
                            btn.parentNode.appendChild(successMsg);
                            setTimeout(() => successMsg.remove(), 3000);
                            
                        } catch (error) {
                            console.error('Download error:', error);
                            alert('Failed to download paper. Please try again.');
                        } finally {
                            btn.innerHTML = '<i class="fas fa-download"></i> Download via Sci-Hub';
                            btn.disabled = false;
                        }
                    });
                });
            }

            // Update the formatResponseWithLinks function
            function formatResponseWithLinks(text) {
                // First handle all regular markdown links
                let formatted = text.replace(
                    /\[(.*?)\]\((https?:\/\/[^\s\)]+)\)/g,
                    '<a href="$2" target="_blank" rel="noopener noreferrer">$1</a>'
                );
                
                // Format references section with enhanced styling and numbering
                const referencesIndex = formatted.indexOf('**References:**');
                if (referencesIndex !== -1) {
                    const mainContent = formatted.substring(0, referencesIndex);
                    let referencesContent = formatted.substring(referencesIndex);
                    
                    // Ensure we display up to 10 references
                    referencesContent = referencesContent
                        .replace('**References:**', '<h4>References:</h4><div class="references-list">')
                        .replace(/- \[(.*?)\]\((https?:\/\/[^\s\)]+)\)( \((.*?)\))?/g, (match, title, url, _, source, index) => `
                            <div class="reference-item">
                                <div class="reference-number">${parseInt(index) + 1}</div>
                                <div class="reference-content">
                                    <a href="${url}" target="_blank" rel="noopener noreferrer" class="reference-title">
                                        ${title}
                                    </a>
                                    ${source ? `<div class="reference-source">${source}</div>` : ''}
                                    <div class="reference-metadata">
                                        <span class="reference-url">${url}</span>
                                    </div>
                                </div>
                            </div>
                        `);
                    
                    // Add a message if fewer than expected references
                    if (referencesContent.split('reference-item').length < 10) {
                        referencesContent += `
                            <div class="reference-note">
                                Additional relevant sources may be available. Consider refining your search terms for more specific results.
                            </div>`;
                    }
                    
                    formatted = mainContent + 
                        '<div class="references-section">' + 
                        referencesContent +
                        '</div></div>';
                }
                
                return formatted;
            }

            // Update the event listeners
            document.querySelector('.send-icon').addEventListener('click', sendMessage);
            document.querySelector('.input-field').addEventListener('keypress', (e) => {
                if (e.key === 'Enter' && !e.shiftKey) {
                    e.preventDefault();
                    sendMessage();
                }
            });

            // Chat History
            document.querySelectorAll('.recent-chat').forEach(chat => {
                chat.addEventListener('click', async () => {
                    try {
                        const chatData = await fetch(`/chat/history/${currentChatId}`).then(res => {
                            if (!res.ok) throw new Error('Failed to fetch chat history');
                            return res.json();
                        });
                        
                        // Rest of the chat display logic...
                    } catch (error) {
                        console.error('Error loading chat history:', error);
                        displayError('Failed to load chat history');
                    }
                });
            });

            // Helper function to check if message is from a different day
            function isNewDay(date1, date2) {
                if (!date1 || !date2) return false;
                const d1 = new Date(date1);
                const d2 = new Date(date2);
                return d1.toDateString() !== d2.toDateString();
            }

            // Chat History Delete
            document.querySelectorAll('.delete-chat').forEach(deleteBtn => {
                deleteBtn.addEventListener('click', async (e) => {
                    e.stopPropagation(); // Prevent chat selection when clicking delete
                    const chatId = deleteBtn.dataset.chatId;
                    
                    if (confirm('Are you sure you want to delete this chat?')) {
                        try {
                            const response = await fetch(`/chat/delete/${chatId}`, {
                                method: 'DELETE'
                            });

                            if (response.ok) {
                                // Remove the chat from sidebar
                                deleteBtn.closest('.recent-chat-container').remove();
                                
                                // If this was the current chat, clear the chat area
                                if (currentChatId === chatId) {
                                    currentChatId = null;
                                    chatMessages.innerHTML = '';
                                    welcomeMessage.style.display = 'flex';
                                }
                            } else {
                                alert('Failed to delete chat');
                            }
                        } catch (error) {
                            console.error('Error deleting chat:', error);
                            alert('Failed to delete chat');
                        }
                    }
                });
            });

            // Add "Clear All" button to sidebar
            const clearAllButton = document.createElement('div');
            clearAllButton.className = 'sidebar-item';
            clearAllButton.innerHTML = `
                <i class="fas fa-trash-alt sidebar-icon"></i>
                <span>Clear All Chats</span>
            `;

            // Insert before the settings button in sidebar-footer
            document.querySelector('.sidebar-footer').insertBefore(
                clearAllButton, 
                document.querySelector('.sidebar-footer .sidebar-item')
            );

            // Handle Clear All functionality
            clearAllButton.addEventListener('click', async () => {
                if (confirm('Are you sure you want to delete all chats? This cannot be undone.')) {
                    // Rest of the clear all logic...
                }
            });

            // Profile and Settings handling
            const settingsIcon = document.querySelector('.settings-icon');
            const settingsPanel = document.getElementById('settingsPanel');
            const closeSettings = document.querySelector('.close-settings');

            settingsIcon.addEventListener('click', () => {
                settingsPanel.style.display = 'block';
                // Close other dropdowns
                profileDropdown.style.display = 'none';
                modelDropdown.style.display = 'none';
                moodSelector.style.display = 'none';
            });

            closeSettings.addEventListener('click', () => {
                settingsPanel.style.display = 'none';
            });

            // Theme selection
            const themeSelect = document.getElementById('themeSelect');
            themeSelect.addEventListener('change', (e) => {
                // Implement theme change logic here
                console.log('Theme changed to:', e.target.value);
            });

            // Language selection
            const languageSelect = document.getElementById('languageSelect');
            languageSelect.addEventListener('change', (e) => {
                // Implement language change logic here
                console.log('Language changed to:', e.target.value);
            });

            // Close dropdowns when clicking outside
            document.addEventListener('click', (e) => {
                if (!e.target.closest('.profile-icon') && !e.target.closest('.profile-dropdown')) {
                    profileDropdown.style.display = 'none';
                }
                if (!e.target.closest('.model-selector') && !e.target.closest('.model-dropdown')) {
                    modelDropdown.style.display = 'none';
                }
                if (!e.target.closest('.mood-selector') && !e.target.closest('.mood-dropdown')) {
                    moodSelector.style.display = 'none';
                }
                if (!e.target.closest('.settings-panel') && !e.target.closest('.settings-icon')) {
                    settingsPanel.style.display = 'none';
                }
            });

            // Profile menu items
            document.querySelectorAll('.profile-item').forEach(item => {
                item.addEventListener('click', () => {
                    if (item.textContent.trim() === 'Sign Out') {
                        // Handle logout
                        window.location.href = '/auth/logout';
                    } else if (item.textContent.trim() === 'Settings') {
                        profileDropdown.style.display = 'none';
                        settingsPanel.style.display = 'block';
                    }
                });
            });

            // Save settings button (add this to your settings panel HTML)
            document.querySelector('#saveSettings')?.addEventListener('click', async () => {
                const settings = {
                    theme: themeSelect.value,
                    language: languageSelect.value
                };
                
                try {
                    const response = await fetch('/user/settings', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(settings)
                    });
                    
                    if (response.ok) {
                        alert('Settings saved successfully');
                        settingsPanel.style.display = 'none';
                    } else {
                        alert('Failed to save settings');
                    }
                } catch (error) {
                    console.error('Error saving settings:', error);
                    alert('Failed to save settings');
                }
            });

            // Model selection visual feedback
            document.querySelectorAll('.model-option').forEach(option => {
                if (option.dataset.model === selectedModel) {
                    option.classList.add('selected');
                }
            });

            // Add this to your existing script section
            const searchTypeSelect = document.getElementById('searchType');
            if (searchTypeSelect) {
                const scholarOption = document.createElement('option');
                scholarOption.value = 'scholar';
                scholarOption.textContent = 'Academic Papers';
                searchTypeSelect.appendChild(scholarOption);
            }
        });
    </script>
</body>
</html>